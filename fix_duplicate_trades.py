"""
Ï§ëÎ≥µÎêú trade_records Ï†ïÎ¶¨ Ïä§ÌÅ¨Î¶ΩÌä∏

2025-07-08 Ïò§Ï†ÑÏóê Î∞úÏÉùÌïú Ï§ëÎ≥µ Ï≤¥Í≤∞ ÏôÑÎ£å Ï≤òÎ¶¨Î°ú Ïù∏Ìïú 
Ï§ëÎ≥µ trade_recordsÎ•º Ï†ïÎ¶¨Ìï©ÎãàÎã§.
"""
import sqlite3
from datetime import datetime


def clean_duplicate_trades():
    """Ï§ëÎ≥µÎêú Îß§Îß§ Í∏∞Î°ù Ï†ïÎ¶¨"""
    conn = sqlite3.connect('trading_data.db')
    cursor = conn.cursor()
    
    try:
        print("=== Ï§ëÎ≥µ trade_records Ï†ïÎ¶¨ ÏãúÏûë ===")
        
        # 1. ÌòÑÏû¨ ÏÉÅÌÉú ÌôïÏù∏
        cursor.execute('''
            SELECT COUNT(*) FROM trade_records 
            WHERE timestamp >= '2025-07-08 09:00:00'
        ''')
        total_count = cursor.fetchone()[0]
        print(f"üìä 2025-07-08 09:00 Ïù¥ÌõÑ Ï¥ù Îß§Îß§ Í∏∞Î°ù: {total_count}Í±¥")
        
        # 2. Ï§ëÎ≥µ Í∏∞Î°ù ÏãùÎ≥Ñ Î∞è Ï†ïÎ¶¨
        # Í∞ôÏùÄ stock_code, trade_type, quantity, price, timestamp(Î∂Ñ Îã®ÏúÑ)Î•º Í∞ÄÏßÑ Ï§ëÎ≥µ Í∏∞Î°ù Ï§ë
        # Í∞ÄÏû• Ïò§ÎûòÎêú ÌïòÎÇòÎßå ÎÇ®Í∏∞Í≥† ÎÇòÎ®∏ÏßÄ ÏÇ≠Ï†ú
        
        cursor.execute('''
            WITH DuplicateGroups AS (
                SELECT 
                    rowid,
                    stock_code,
                    stock_name,
                    trade_type,
                    quantity,
                    price,
                    timestamp,
                    ROW_NUMBER() OVER (
                        PARTITION BY 
                            stock_code, 
                            trade_type, 
                            quantity, 
                            price,
                            strftime('%Y-%m-%d %H:%M', timestamp)
                        ORDER BY rowid ASC
                    ) as row_num
                FROM trade_records
                WHERE timestamp >= '2025-07-08 09:00:00'
            )
            SELECT 
                rowid, stock_name, trade_type, quantity, price, timestamp
            FROM DuplicateGroups 
            WHERE row_num > 1
            ORDER BY stock_code, timestamp
        ''')
        
        duplicates_to_delete = cursor.fetchall()
        
        if duplicates_to_delete:
            print(f"\nüìã ÏÇ≠Ï†úÌï† Ï§ëÎ≥µ Í∏∞Î°ù: {len(duplicates_to_delete)}Í±¥")
            for record in duplicates_to_delete:
                print(f"  ID:{record[0]} - {record[1]} {record[2]} {record[3]}Ï£º @ {record[4]:,}Ïõê ({record[5]})")
            
            # ÏÇ¨Ïö©Ïûê ÌôïÏù∏
            response = input(f"\nÏúÑ {len(duplicates_to_delete)}Í±¥Ïùò Ï§ëÎ≥µ Í∏∞Î°ùÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå? (y/N): ")
            
            if response.lower() == 'y':
                # Ï§ëÎ≥µ Í∏∞Î°ù ÏÇ≠Ï†ú
                delete_ids = [str(record[0]) for record in duplicates_to_delete]
                placeholders = ','.join(['?'] * len(delete_ids))
                
                cursor.execute(f'DELETE FROM trade_records WHERE rowid IN ({placeholders})', delete_ids)
                deleted_count = cursor.rowcount
                
                conn.commit()
                print(f"‚úÖ {deleted_count}Í±¥Ïùò Ï§ëÎ≥µ Í∏∞Î°ùÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.")
                
                # Ï†ïÎ¶¨ ÌõÑ ÏÉÅÌÉú ÌôïÏù∏
                cursor.execute('''
                    SELECT COUNT(*) FROM trade_records 
                    WHERE timestamp >= '2025-07-08 09:00:00'
                ''')
                remaining_count = cursor.fetchone()[0]
                print(f"üìä Ï†ïÎ¶¨ ÌõÑ Îß§Îß§ Í∏∞Î°ù: {remaining_count}Í±¥")
                
            else:
                print("‚ùå Ï§ëÎ≥µ Í∏∞Î°ù ÏÇ≠Ï†úÍ∞Ä Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§.")
        else:
            print("‚úÖ Ï§ëÎ≥µ Í∏∞Î°ùÏù¥ ÏóÜÏäµÎãàÎã§.")
            
        # 3. ÎåÄÍµêÏö∞BÏôÄ Ïö∞ÏßÑÏïÑÏù¥ÏóîÏóêÏä§ Í∏∞Î°ù ÌôïÏù∏
        print("\n=== Î¨∏Ï†ú Ï¢ÖÎ™© Í∏∞Î°ù ÌôïÏù∏ ===")
        cursor.execute('''
            SELECT stock_name, trade_type, quantity, price, COUNT(*) as count
            FROM trade_records 
            WHERE (stock_name LIKE '%ÎåÄÍµê%' OR stock_name LIKE '%Ïö∞ÏßÑ%')
              AND timestamp >= '2025-07-08 09:00:00'
            GROUP BY stock_name, trade_type, quantity, price
            ORDER BY stock_name, timestamp
        ''')
        
        problem_records = cursor.fetchall()
        for record in problem_records:
            print(f"  {record[0]} {record[1]} {record[2]}Ï£º @ {record[3]:,}Ïõê - {record[4]}Í±¥")
            
    except Exception as e:
        print(f"‚ùå Ïò§Î•ò Î∞úÏÉù: {e}")
        conn.rollback()
    finally:
        conn.close()


if __name__ == "__main__":
    clean_duplicate_trades() 